from flask import Flask, request, jsonify
from flask_cors import CORS
import torch
import torchvision.models as models
import torchvision.transforms as transforms
from PIL import Image
import io
import cv2
import numpy as np
import pytesseract
import yolov5  # Assuming yolov5 is installed

app = Flask(__name__)
CORS(app)

# Load models
# Object Detection (YOLOv5)
yolo_model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)

# Image Classification (ResNet50)
classify_model = models.resnet50(pretrained=True)
classify_model.eval()
with open('imagenet_classes.txt', 'r') as f:  # You'll need this file with ImageNet class names
    imagenet_classes = [line.strip() for line in f.readlines()]

# Preprocessing for classification
preprocess = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

@app.route('/api/inspect', methods=['POST'])
def inspect():
    if 'image' not in request.files:
        return jsonify({'result': 'No image uploaded.'}), 400

    image_file = request.files['image']
    inspection_type = request.form['type']
    image = Image.open(io.BytesIO(image_file.read())).convert('RGB')
    img_cv = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)

    if inspection_type == 'object':
        # Object Detection with YOLOv5
        results = yolo_model(image)
        detections = results.pandas().xyxy[0]  # Get detections as a DataFrame
        if len(detections) > 0:
            output = f"Detected {len(detections)} objects: "
            output += ", ".join([f"{row['name']} ({row['confidence']:.2f})" for _, row in detections.iterrows()])
        else:
            output = "No objects detected."
        return jsonify({'result': output})

    elif inspection_type == 'classify':
        # Image Classification with ResNet50
        input_tensor = preprocess(image).unsqueeze(0)
        with torch.no_grad():
            output = classify_model(input_tensor)
            probabilities = torch.nn.functional.softmax(output[0], dim=0)
            top_prob, top_idx = probabilities.topk(1)
            label = imagenet_classes[top_idx[0]]
            confidence = top_prob[0].item()
        return jsonify({'result': f"Classified as '{label}' with {confidence:.2%} confidence."})

    elif inspection_type == 'anomaly':
        # Anomaly Detection (simple thresholding example)
        gray = cv2.cvtColor(img_cv, cv2.COLOR_BGR2GRAY)
        _, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
        anomalies = cv2.countNonZero(thresh)
        if anomalies > 1000:  # Arbitrary threshold for demo
            output = "Anomaly detected: Significant deviations found."
        else:
            output = "No significant anomalies detected."
        return jsonify({'result': output})

    elif inspection_type == 'ocr':
        # OCR with Tesseract
        text = pytesseract.image_to_string(img_cv)
        if text.strip():
            output = f"Extracted text: '{text.strip()}'"
        else:
            output = "No text detected."
        return jsonify({'result': output})

    return jsonify({'result': 'Invalid inspection type.'}), 400

if __name__ == '__main__':
    app.run(debug=True, port=5000)